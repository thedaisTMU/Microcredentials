# create a new datatable that combines the data from both datatables
data <- rbind(
software_withoutmc_common_skills[, .(Group = "Without MC", `Common Skill`, Professionals)],
`software_mc_Common Skills`[, .(Group = "With MC", `Common Skill` = Skills, Professionals)]
)
# normalize the Professionals variable within each group
data[, NormalizedProfessionals := ifelse(Group == "With MC", Professionals / sum(software_mc_Locations$Professionals), Professionals / sum(software_withoutmc_location$Professionals))]
# Calculate the differences in professionals between individuals with and without microcredentials for each common skill
data_diff <- data[, .(Difference = diff(NormalizedProfessionals)), by = .(`Common Skill`)]
# Calculate the absolute differences
data_diff[, AbsoluteDifference := abs(Difference)]
# Sort the data in descending order of the absolute difference
data_diff <- data_diff[order(-AbsoluteDifference)]
# Select the top 10 values of the absolute differences
top_10_diff <- head(data_diff, 10)
###
# Sort the data in descending order of the difference
data_diff <- data_diff[order(-Difference)]
# Select the top 10 values where MC is higher
top_10_diff_mc <- head(data_diff, 10)
###
# Sort the data in ascending order of the difference
data_diff <- data_diff[order(Difference)]
# Select the top 10 values where without MC is higher
top_10_diff_withoutmc <- head(data_diff, 10)
###
# Filter data for common skills in top_10_diff
filtered_data <- data[`Common Skill` %in% top_10_diff$`Common Skill`]
# Filter data for common skills in top_10_diff_mc
filtered_data_mc <- data[`Common Skill` %in% top_10_diff_mc$`Common Skill`]
# Filter data for common skills in top_10_diff_withoutmc
filtered_data_withoutmc <- data[`Common Skill` %in% top_10_diff_withoutmc$`Common Skill`]
# ggplot(filtered_data, aes(x = `Common Skill`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
# ggplot(filtered_data_mc, aes(x = `Common Skill`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
# ggplot(filtered_data_withoutmc, aes(x = `Common Skill`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#Top 5s
data_diff <- data_diff[order(Difference)]
top_5_diff_withoutmc <- head(data_diff, 5)
data_diff <- data_diff[order(-Difference)]
top_5_diff_mc <- head(data_diff, 5)
combined_data <- rbind(transform(top_5_diff_mc, Group = "With MC"),
transform(top_5_diff_withoutmc, Group = "Without MC"))
# Graph with bars on the right and left
# ggplot(combined_data, aes(x = `Difference`, y = `Common Skill`, fill = Group)) +
#   geom_bar(stat = "identity", position = position_dodge()) +
#   scale_fill_manual(values = c("With MC" = "#eb0072", "Without MC" = "#6bbfae")) +
#   labs(title = "Figure 1",
#        subtitle = "Comparison of % Differences in Skills with and without MC",
#        x = "Difference", y = "Common Skill", fill = "Group",
#        caption = "Source: Linkedin Insights Data" ) +
#   dais.base.theme() +
#   theme(panel.background=element_blank(),
#         axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, family = "Replica-Regular")) +
#   geom_text(aes(label = percent(round(abs(`Difference`), 3))),
#             position = position_dodge(width = 0.9), vjust = 0.5, color = "black", family = "Replica-Regular")
combined_data[, Difference := Difference * 100]
combined_data[, Difference := round(Difference, 0)]
# Run updated plot.column.dais code here first
plot.column.dais(data = combined_data,
x = Difference,
cat = `Common Skill`,
group.by = Group,
plot.title = "Software Professionals: Skills Reporting Differences \nBased on Microcredential Completion",
plot.fig.num = "Figure 5",
order.bar = "No",
column.width = 0.6,
colours = c("#5bc2f4", "black"),
label = TRUE,
label.adjust = 0.1,
label.unit = "%",
language = "EN",
y.axis = "Common Skill",
legend.title = "Group",
caption = "Source: LinkedIn Talent Insights Data, July 2023",
logo = FALSE,
export = FALSE) +coord_flip() +
scale_y_continuous(labels = function(x) paste0(x, "%"))
#annotate("text", x = -2, y = 10, label = "DS: Data Scientists")
ggsave("Graphs_Exports/Figure_5.pdf", plot = last_plot(), width = 7.25, height = 7.25, units = "in")
write.csv(combined_data, "Graphs_data/Figure_5.csv", row.names = FALSE)
# Define some Dais colours
dais_palette <- c("#DDA5C0", "#6bbfae" , "#ffa300",  "#002d72", "#eb0072" ,"#5bc2f4" )
# Common Skills treemap
# treemap(data,
#         index = c("Group", "Common Skill"),
#         vSize = "NormalizedProfessionals",
#         title = "Comparison of Common Skills",
#         palette = dais_palette,
#         #fontfamily.title = "Rooneysans",
#         #fontfamily.labels = "Rooneysans",
#         #fontfamily.legend = "Rooneysans",
#         fontsize.labels = 12)
######################################################################
# Industry
# create a new datatable that combines the data from both datatables
data <- rbind(
software_withoutmc_industries[, .(Group = "Without MC", Industry, Professionals)],
software_mc_Industries[, .(Group = "With MC", Industry, Professionals)]
)
# normalize the Professionals variable within each group
data[, NormalizedProfessionals := ifelse(Group == "With MC", Professionals / sum(software_mc_Locations$Professionals), Professionals / sum(software_withoutmc_location$Professionals))]
# Calculate the differences in professionals between individuals with and without microcredentials for each industry
data_diff <- data[, .(Difference = diff(NormalizedProfessionals)), by = .(Industry)]
# Calculate the absolute differences
data_diff[, AbsoluteDifference := abs(Difference)]
# Sort the data in descending order of the absolute difference
data_diff <- data_diff[order(-AbsoluteDifference)]
# Select the top 10 values of the absolute differences
top_10_diff <- head(data_diff, 10)
###
# Sort the data in descending order of the difference
data_diff <- data_diff[order(-Difference)]
# Select the top 10 values where MC is higher
top_10_diff_mc <- head(data_diff, 10)
###
# Sort the data in ascending order of the difference
data_diff <- data_diff[order(Difference)]
# Select the top 10 values where without MC is higher
top_10_diff_withoutmc <- head(data_diff, 10)
###
# Filter data in top_10_diff
filtered_data <- data[Industry %in% top_10_diff$Industry]
# Filter data in top_10_diff_mc
filtered_data_mc <- data[Industry %in% top_10_diff_mc$Industry]
# Filter data in top_10_diff_withoutmc
filtered_data_withoutmc <- data[Industry %in% top_10_diff_withoutmc$Industry]
# ggplot(filtered_data, aes(x = Industry, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
# ggplot(filtered_data_mc, aes(x = Industry, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
# ggplot(filtered_data_withoutmc, aes(x = Industry, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#Top 5s
data_diff <- data_diff[order(Difference)]
top_5_diff_withoutmc <- head(data_diff, 5)
data_diff <- data_diff[order(-Difference)]
top_5_diff_mc <- head(data_diff, 5)
combined_data <- rbind(transform(top_5_diff_mc, Group = "With MC"),
transform(top_5_diff_withoutmc, Group = "Without MC"))
# Graph with bars on the right and left
# ggplot(combined_data, aes(x = `Difference`, y = `Industry`, fill = Group)) +
#   geom_bar(stat = "identity", position = position_dodge()) +
#   scale_fill_manual(values = c("With MC" = "#eb0072", "Without MC" = "#6bbfae")) +
#   labs(title = "Figure 1",
#        subtitle = "Comparison of % Differences in Industry with and without MC",
#        x = "Difference", y = "Industry", fill = "Group",
#        caption = "Source: Linkedin Insights Data" ) +
#   dais.base.theme() +
#   theme(panel.background=element_blank(),
#         axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, family = "Replica-Regular")) +
#   geom_text(aes(label = percent(round(abs(`Difference`), 3))),
#             position = position_dodge(width = 0.9), vjust = 0.5, color = "black", family = "Replica-Regular")
combined_data[, Difference := Difference * 100]
combined_data[, Difference := round(Difference, 0)]
# Run updated plot.column.dais code here first
plot.column.dais(data = combined_data,
x = Difference,
cat = Industry,
group.by = Group,
plot.title = "Software Professionals: Industry Differences \nBased on Microcredential Completion",
plot.fig.num = "Figure 6",
order.bar = "No",
column.width = 0.6,
colours = c("#5bc2f4", "black"),
label = TRUE,
label.adjust = 0.1,
label.unit = "%",
language = "EN",
y.axis = "Industry",
legend.title = "Group",
caption = "Source: LinkedIn Talent Insights Data, July 2023",
logo = FALSE,
export = FALSE) +coord_flip() +
scale_y_continuous(labels = function(x) paste0(x, "%"))
#annotate("text", x = -2, y = 10, label = "DS: Data Scientists")
ggsave("Graphs_Exports/Figure_6.pdf", plot = last_plot(), width = 7.25, height = 7.25, units = "in")
write.csv(combined_data, "Graphs_data/Figure_6.csv", row.names = FALSE)
# Industries treemap
# treemap(data,
#         index = c("Group", "Industry"),
#         vSize = "NormalizedProfessionals",
#         title = "Comparison of Industries",
#         palette = dais_palette,
#         #fontfamily.title = "Rooneysans",
#         #fontfamily.labels = "Rooneysans",
#         #fontfamily.legend = "Rooneysans",
#         fontsize.labels = 12)
######################################################################
# Common Titles
# create a new datatable that combines the data from both datatables
data <- rbind(
software_withoutmc_common_titles[, .(Group = "Without MC", `Common Title`, Professionals)],
`software_mc_Common Titles`[, .(Group = "With MC", `Common Title` = Titles, Professionals)]
)
# normalize the Professionals variable within each group
data[, NormalizedProfessionals := ifelse(Group == "With MC", Professionals / sum(software_mc_Locations$Professionals), Professionals / sum(software_withoutmc_location$Professionals))]
# Calculate the differences in professionals between individuals with and without microcredentials for each common title
data_diff <- data[, .(Difference = diff(NormalizedProfessionals)), by = .(`Common Title`)]
# Calculate the absolute differences
data_diff[, AbsoluteDifference := abs(Difference)]
# Sort the data in descending order of the absolute difference
data_diff <- data_diff[order(-AbsoluteDifference)]
# Select the top 10 values of the absolute differences
top_10_diff <- head(data_diff, 10)
###
# Sort the data in descending order of the difference
data_diff <- data_diff[order(-Difference)]
# Select the top 10 values where MC is higher
top_10_diff_mc <- head(data_diff, 10)
###
# Sort the data in ascending order of the difference
data_diff <- data_diff[order(Difference)]
# Select the top 10 values where without MC is higher
top_10_diff_withoutmc <- head(data_diff, 10)
###
# Filter data in top_10_diff
filtered_data <- data[`Common Title` %in% top_10_diff$`Common Title`]
# Filter data in top_10_diff_mc
filtered_data_mc <- data[`Common Title` %in% top_10_diff_mc$`Common Title`]
# Filter data in top_10_diff_withoutmc
filtered_data_withoutmc <- data[`Common Title` %in% top_10_diff_withoutmc$`Common Title`]
#
# ggplot(filtered_data, aes(x = `Common Title`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
# ggplot(filtered_data_mc, aes(x = `Common Title`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
# ggplot(filtered_data_withoutmc, aes(x = `Common Title`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#Top 5s
data_diff <- data_diff[order(Difference)]
top_5_diff_withoutmc <- head(data_diff, 5)
data_diff <- data_diff[order(-Difference)]
top_5_diff_mc <- head(data_diff, 5)
combined_data <- rbind(transform(top_5_diff_mc, Group = "With MC"),
transform(top_5_diff_withoutmc, Group = "Without MC"))
#Fix duplication issue in seniority excel file
seniority2 <- distinct(seniority2, Titles, .keep_all = TRUE)
#Add Seniority
combined_data_with_seniority <- merge(combined_data, seniority2,
by.x = "Common Title",
by.y = "Titles",all.x = TRUE)
combined_data_with_seniority <- combined_data_with_seniority %>%
mutate(Title_and_Seniority = paste(`Common Title`, "\n(", `Seniority`, ")", sep = ""))
# Graph with bars on the right and left
# ggplot(combined_data_with_seniority, aes(x = `Difference`, y = `Title_and_Seniority`, fill = Group)) +
#   geom_bar(stat = "identity", position = position_dodge()) +
#   scale_fill_manual(values = c("With MC" = "#eb0072", "Without MC" = "#6bbfae")) +
#   labs(title = "Figure 1",
#        subtitle = "Comparison of % Differences in Common Titles with and without MC",
#        x = "Difference", y = "Job Titles and Seniority Levels", fill = "Group",
#        caption = "Source: Linkedin Insights Data" ) +
#   dais.base.theme() +
#   theme(panel.background=element_blank(),
#         axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, family = "Replica-Regular")) +
#   geom_text(aes(label = percent(round(abs(`Difference`), 3))),
#             position = position_dodge(width = 0.9), vjust = 0.5, color = "black", family = "Replica-Regular")
combined_data_with_seniority[, Difference := Difference * 100]
combined_data_with_seniority[, Difference := round(Difference, 0)]
# Run updated plot.column.dais code here first
plot.column.dais(data = combined_data_with_seniority,
x = Difference,
cat = Title_and_Seniority,
group.by = Group,
plot.title = "Software Professionals: Job Title Differences \nBased on Microcredential Completion",
plot.fig.num = "Figure 7",
order.bar = "No",
column.width = 0.6,
colours = c("#5bc2f4", "black"),
label = TRUE,
label.adjust = 0.1,
label.unit = "%",
language = "EN",
y.axis = "Job Titles",
legend.title = "Group",
caption = "Source: LinkedIn Talent Insights Data, July 2023",
logo = FALSE,
export = FALSE) +coord_flip() + labs(x = "Job Titles and Seniority") +
scale_y_continuous(labels = function(x) paste0(x, "%"))
#annotate("text", x = -2, y = 10, label = "DS: Data Scientists")
ggsave("Graphs_Exports/Figure_7.pdf", plot = last_plot(), width = 7.25, height = 7.25, units = "in")
write.csv(combined_data_with_seniority, "Graphs_data/Figure_7.csv", row.names = FALSE)
# Common Titles treemap
# treemap(data,
#         index = c("Group", "Common Title"),
#         vSize = "NormalizedProfessionals",
#         title = "Comparison of Common Titles",
#         palette = dais_palette,
#         #fontfamily.title = "Rooneysans",
#         #fontfamily.labels = "Rooneysans",
#         #fontfamily.legend = "Rooneysans",
#         fontsize.labels = 12)
######################################################################
# Fields of Study
# create a new datatable that combines the data from both datatables
data <- rbind(
software_withoutmc_fields_of_study[, .(Group = "Without MC", `Field of Study`, Professionals)],
`software_mc_Fields of Study`[, .(Group = "With MC", `Field of Study` = Fields.of.study, Professionals)]
)
# normalize the Professionals variable within each group
data[, NormalizedProfessionals := ifelse(Group == "With MC", Professionals / sum(software_mc_Locations$Professionals), Professionals / sum(software_withoutmc_location$Professionals))]
# Calculate the differences in professionals between individuals with and without microcredentials for each field of study
data_diff <- data[, .(Difference = diff(NormalizedProfessionals)), by = .(`Field of Study`)]
# Calculate the absolute differences
data_diff[, AbsoluteDifference := abs(Difference)]
# Sort the data in descending order of the absolute difference
data_diff <- data_diff[order(-AbsoluteDifference)]
# Select the top 10 values of the absolute differences
top_10_diff <- head(data_diff, 10)
###
# Sort the data in descending order of the difference
data_diff <- data_diff[order(-Difference)]
# Select the top 10 values where MC is higher
top_10_diff_mc <- head(data_diff, 10)
###
# Sort the data in ascending order of the difference
data_diff <- data_diff[order(Difference)]
# Select the top 10 values where without MC is higher
top_10_diff_withoutmc <- head(data_diff, 10)
###
# Filter data in top_10_diff
filtered_data <- data[`Field of Study` %in% top_10_diff$`Field of Study`]
# Filter data in top_10_diff_mc
filtered_data_mc <- data[`Field of Study` %in% top_10_diff_mc$`Field of Study`]
# Filter data in top_10_diff_withoutmc
filtered_data_withoutmc <- data[`Field of Study` %in% top_10_diff_withoutmc$`Field of Study`]
# ggplot(filtered_data, aes(x = `Field of Study`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
# ggplot(filtered_data_mc, aes(x = `Field of Study`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Field of Study", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   dais.base.theme() +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
# ggplot(filtered_data_withoutmc, aes(x = `Field of Study`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   dais.base.theme() +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#Top 5s
data_diff <- data_diff[order(Difference)]
top_5_diff_withoutmc <- head(data_diff, 5)
data_diff <- data_diff[order(-Difference)]
top_5_diff_mc <- head(data_diff, 5)
combined_data <- rbind(transform(top_5_diff_mc, Group = "With MC"),
transform(top_5_diff_withoutmc, Group = "Without MC"))
#Add STEM VS BHASE to fields of Study
combined_data_with_broad_field <- merge(combined_data, stemvsbhase,
by.x = "Field of Study",
by.y = "Fields of study",all.x = TRUE)
combined_data_with_broad_field <- combined_data_with_broad_field %>%
mutate(Study_Field_and_Broad = paste(`Field of Study`, "\n(", `Broad Field of Study`, ")", sep = ""))
# Graph with bars on the right and left
# ggplot(combined_data_with_broad_field, aes(x = `Difference`, y = `Study_Field_and_Broad`, fill = Group)) +
#   geom_bar(stat = "identity", position = position_dodge()) +
#   scale_fill_manual(values = c("With MC" = "#eb0072", "Without MC" = "#6bbfae")) +
#   labs(title = "Figure 1",
#        subtitle = "Comparison of % Differences in Fields of Study with and without MC",
#        x = "Difference", y = "Field of Study", fill = "Group",
#        caption = "Source: Linkedin Insights Data" ) +
#   dais.base.theme() +
#   theme(panel.background=element_blank(),
#         axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1, family = "Replica-Regular")) +
#   geom_text(aes(label = percent(round(abs(`Difference`), 3))),
#             position = position_dodge(width = 0.9), vjust = 0.5, color = "black", family = "Replica-Regular")
combined_data_with_broad_field[, Difference := Difference * 100]
combined_data_with_broad_field[, Difference := round(Difference, 0)]
# Run updated plot.column.dais code here first
plot.column.dais(data = combined_data_with_broad_field,
x = Difference,
cat = Study_Field_and_Broad,
group.by = Group,
plot.title = "Software Professionals: Field of Study Differences \nBased on Microcredential Completion",
plot.fig.num = "Figure 8",
order.bar = "No",
column.width = 0.6,
colours = c("#5bc2f4", "black"),
label = TRUE,
label.adjust = 0.1,
label.unit = "%",
language = "EN",
y.axis = "Field of Study",
legend.title = "Group",
caption = "Source: LinkedIn Talent Insights Data, July 2023",
logo = FALSE,
export = FALSE) +coord_flip() + labs(x = "Field of Study") +
scale_y_continuous(labels = function(x) paste0(x, "%"))
#annotate("text", x = -2, y = 10, label = "DS: Data Scientists")
ggsave("Graphs_Exports/Figure_8.pdf", plot = last_plot(), width = 7.25, height = 7.25, units = "in")
write.csv(combined_data_with_broad_field, "Graphs_data/Figure_8.csv", row.names = FALSE)
# Field of Study treemap
#
# treemap(data,
#         index = c("Group", "Field of Study"),
#         vSize = "NormalizedProfessionals",
#         title = "Comparison of Fields of Study",
#         palette = dais_palette,
#         #fontfamily.title = "Rooneysans",
#         #fontfamily.labels = "Rooneysans",
#         #fontfamily.legend = "Rooneysans",
#         fontsize.labels = 12)
######################################################################
##############################################################
###########################################################
# Within Group Comparisons ####
################################################
###################################################
#########################################################
##############################################################
######################################################################
############################################
######################################
################################
#########################
#######
# Stacked bars for
# 1.stem vs non-stem
# 2. Seniority
# 3. Ict vs non-ict
######## 1.stem vs non-stem
##### Data Scientists
data <- rbind(
data_scientists_withoutmc_fields_of_study[, .(Group = "Without MC", `Field of Study`, Professionals)],
`data_scientist_mc_Fields of Study`[, .(Group = "With MC", `Field of Study` = Fields.of.study, Professionals)]
)
# Convert Professionals to percentages among the same attribute
data[, NormalizedProfessionals := Professionals / sum(Professionals), by = Group]
# Set the keys for both data.tables
setkey(data, `Field of Study`)
setkey(stemvsbhase, `Fields of study`)
combined_data_with_broad_field <- data[stemvsbhase, nomatch = 0]
data[, .(TotalProfessionals = sum(Professionals)), by = Group]
combined_data_with_broad_field[, .(TotalProfessionals = sum(Professionals)), by = Group]
data[, .(TotalProfessionals = sum(Professionals)), by = Group]
non_matching_rows <- data[!stemvsbhase, nomatch = 0][Group == "Without MC"]
non_matching_rows <- data[!stemvsbhase][Group == "Without MC"]
View(non_matching_rows)
View(stemvsbhase)
setkey(data, `Field of Study`)
setkey(stemvsbhase, `Fields of study`)
combined_data_with_broad_field <- data[stemvsbhase, nomatch = 0]
combined_data_with_broad_field <- data[stemvsbhase, nomatch = 0]
View(combined_data_with_broad_field)
combined_data_with_broad_field <- data[stemvsbhase, nomatch = NA]
View(combined_data_with_broad_field)
View(data)
subset_data <- data[`Field of Study` == "Actuarial Science"]
subset_stemvsbhase <- stemvsbhase[`Fields of study` == "Actuarial Science"]
subset_combined <- subset_data[subset_stemvsbhase, nomatch = 0]
View(subset_combined)
subset_data <- data[`Field of Study` == "Actuarial Science"]
subset_stemvsbhase <- stemvsbhase[`Fields of study` == "Actuarial Science"]
forced_join <- merge(subset_data, subset_stemvsbhase, by.x = "Field of Study", by.y = "Fields of study")
# clear data and close graphs
rm(list=ls())
graphics.off()
# clear data and close graphs
rm(list=ls())
graphics.off()
