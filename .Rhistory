#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
ggplot(filtered_data_se, aes(x = `Field of Study`, y = NormalizedProfessionals, fill = Group)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Field of Study", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and Without SE for top 10 skill differences") +
dais.base.theme() +
theme(panel.background=element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
scale_fill_manual(values = c("#eb0072", "#6bbfae"))
ggplot(filtered_data_withoutse, aes(x = `Field of Study`, y = NormalizedProfessionals, fill = Group)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and Without SE for top 10 skill differences") +
dais.base.theme() +
theme(panel.background=element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#Top 5s
data_diff <- data_diff[order(Difference)]
top_5_diff_withoutse <- head(data_diff, 5)
data_diff <- data_diff[order(-Difference)]
top_5_diff_se <- head(data_diff, 5)
combined_data <- rbind(transform(top_5_diff_se, Group = "SE"),
transform(top_5_diff_withoutse, Group = "Without SE"))
# Graph with bars on the right and left
ggplot(combined_data, aes(x = `Difference`, y = `Field of Study`, fill = Group)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("SE" = "#eb0072", "Without SE" = "#6bbfae")) +
labs(x = "Difference", y = "Field of Study", fill = "Group") +
dais.base.theme() +
theme(panel.background=element_blank()) +
ggtitle("Comparison of % Differences in Fields of Study with and Without SE") +
geom_text(aes(label = percent(round(abs(`Difference`), 3))),
position = position_dodge(width = 0.9), vjust = 0.5, color = "black")
# clear data and close graphs
rm(list=ls())
graphics.off()
# set working directory
setwd("C:/Users/Ibrahim/OneDrive/Desktop/Brookfield 2023/Microcredentials")
# Load the necessary libraries
library(data.table)
library(stringr)
library(psych)
library(knitr)
library(tidyverse)
library(readxl)
library(dplyr)
library(treemap)
library(extrafont)
library(showtext)
library(ggplot2)
library(DaisTheme)
library(scales)
library(openxlsx)
# Read in data
# Create an empty list to store the data.tables
data_list <- list()
stemvsbhase <- as.data.table(read_excel("Broad Fields of Study.xlsx"))
#################################
#IMPORT FIRST EXCEL FILE
##################################
sheets <- excel_sheets("data-scientist-21211.xlsx")
# Loop through each sheet and read it into a data.table
for (sheet in sheets) {
data <- as.data.table(read_excel("data-scientist-21211.xlsx", sheet = sheet))
setnames(data, make.names(names(data)))
data_list[[sheet]] <- data
}
# Unpack the data_list with modified names
for (i in seq_along(data_list)) {
assign(paste0("data_scientist_all_", names(data_list)[i]), data_list[[i]])
}
rm(data)
rm(data_list)
rm(i)
rm(sheet)
rm(sheets)
#################################
#IMPORT SECOND EXCEL FILE
##################################
# Create an empty list to store the data.tables
data_list <- list()
sheets <- excel_sheets("data-scientist-mc2.xlsx")
# Loop through each sheet and read it into a data.table
for (sheet in sheets) {
data <- as.data.table(read_excel("data-scientist-mc2.xlsx", sheet = sheet))
setnames(data, make.names(names(data)))
data_list[[sheet]] <- data
}
# Unpack the data_list with modified names
for (i in seq_along(data_list)) {
assign(paste0("data_scientist_mc_", names(data_list)[i]), data_list[[i]])
}
rm(data)
rm(data_list)
rm(i)
rm(sheet)
rm(sheets)
#################################
#IMPORT THIRD EXCEL FILE
##################################
# Create an empty list to store the data.tables
data_list <- list()
sheets <- excel_sheets("software-engineer-developer-no-m.xlsx")
# Loop through each sheet and read it into a data.table
for (sheet in sheets) {
data <- as.data.table(read_excel("software-engineer-developer-no-m.xlsx", sheet = sheet))
setnames(data, make.names(names(data)))
data_list[[sheet]] <- data
}
# Unpack the data_list with modified names
for (i in seq_along(data_list)) {
assign(paste0("software_all_", names(data_list)[i]), data_list[[i]])
}
rm(data)
rm(data_list)
rm(i)
rm(sheet)
rm(sheets)
#################################
#IMPORT FOURTH EXCEL FILE
##################################
# Create an empty list to store the data.tables
data_list <- list()
sheets <- excel_sheets("software-engineer-with-mc2.xlsx")
# Loop through each sheet and read it into a data.table
for (sheet in sheets) {
data <- as.data.table(read_excel("software-engineer-with-mc2.xlsx", sheet = sheet))
setnames(data, make.names(names(data)))
data_list[[sheet]] <- data
}
# Unpack the data_list with modified names
for (i in seq_along(data_list)) {
assign(paste0("software_mc_", names(data_list)[i]), data_list[[i]])
}
rm(data)
rm(data_list)
rm(i)
rm(sheet)
rm(sheets)
###############################################################
###############################################################
###############################################################
###############################################################
# LOCATION
merged_data <- merge(data_scientist_all_Locations, data_scientist_mc_Locations, by = "Location", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
data_scientists_withoutmc_location <- data.table(Location = merged_data$Location,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
merged_data <- merge(software_all_Locations, software_mc_Locations, by = "Location", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
software_withoutmc_location <- data.table(Location = merged_data$Location,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
# Companies
merged_data <- merge(data_scientist_all_Companies, data_scientist_mc_Companies, by = "Company", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
data_scientists_withoutmc_company <- data.table(Company = merged_data$Company,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
merged_data <- merge(software_all_Companies, software_mc_Companies, by = "Company", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
software_withoutmc_company <- data.table(Company = merged_data$Company,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
# Common Titles
merged_data <- merge(`data_scientist_all_Common Titles`, `data_scientist_mc_Common Titles`, by = "Titles", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
data_scientists_withoutmc_common_titles <- data.table(`Common Title` = merged_data$`Titles`,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
merged_data <- merge(`software_all_Common Titles`, `software_mc_Common Titles`, by = "Titles", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
software_withoutmc_common_titles <- data.table(`Common Title` = merged_data$`Titles`,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
# Common Skills
merged_data <- merge(`data_scientist_all_Common Skills`, `data_scientist_mc_Common Skills`, by = "Skills", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
data_scientists_withoutmc_common_skills <- data.table(`Common Skill` = merged_data$`Skills`,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
merged_data <- merge(`software_all_Common Skills`, `software_mc_Common Skills`, by = "Skills", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
software_withoutmc_common_skills <- data.table(`Common Skill` = merged_data$`Skills`,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
# Industries
merged_data <- merge(data_scientist_all_Industries, data_scientist_mc_Industries, by = "Industry", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
data_scientists_withoutmc_industries <- data.table(Industry = merged_data$Industry,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
merged_data <- merge(software_all_Industries, software_mc_Industries, by = "Industry", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
software_withoutmc_industries <- data.table(Industry = merged_data$Industry,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
# Schools
merged_data <- merge(data_scientist_all_Schools, data_scientist_mc_Schools, by = "Schools", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
data_scientists_withoutmc_schools <- data.table(School = merged_data$School,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
merged_data <- merge(software_all_Schools, software_mc_Schools, by = "Schools", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
software_withoutmc_schools <- data.table(School = merged_data$School,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
# Fields of Study
merged_data <- merge(`data_scientist_all_Fields of Study`, `data_scientist_mc_Fields of Study`, by = "Fields.of.study", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
data_scientists_withoutmc_fields_of_study <- data.table(`Field of Study` = merged_data$`Fields.of.study`,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
merged_data <- merge(`software_all_Fields of Study`, `software_mc_Fields of Study`, by = "Fields.of.study", suffixes = c("_all", "_mc"), all.x = TRUE)
merged_data[is.na(Professionals_mc), Professionals_mc := 0]
software_withoutmc_fields_of_study <- data.table(`Field of Study` = merged_data$`Fields.of.study`,
Professionals = merged_data$Professionals_all - merged_data$Professionals_mc)
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
######## COMPARISONS #########
##### DATA SCIENTISTS ######
# COMMON SKILLS
# create a new datatable that combines the data from both datatables
data <- rbind(
data_scientists_withoutmc_common_skills[, .(Group = "Without MC", `Common Skill`, Professionals)],
`data_scientist_mc_Common Skills`[, .(Group = "With MC", `Common Skill` = Skills, Professionals)]
)
# normalize the Professionals variable within each group
data[, NormalizedProfessionals := ifelse(Group == "With MC", Professionals / sum(data_scientist_mc_Locations$Professionals), Professionals / sum(data_scientists_withoutmc_location$Professionals))]
# Calculate the differences in professionals between individuals with and without microcredentials for each common skill
data_diff <- data[, .(Difference = diff(NormalizedProfessionals)), by = .(`Common Skill`)]
# Calculate the absolute differences
data_diff[, AbsoluteDifference := abs(Difference)]
# Sort the data in descending order of the absolute difference
data_diff <- data_diff[order(-AbsoluteDifference)]
# Select the top 10 values of the absolute differences
top_10_diff <- head(data_diff, 10)
###
# Sort the data in descending order of the difference
data_diff <- data_diff[order(-Difference)]
# Select the top 10 values where MC is higher
top_10_diff_mc <- head(data_diff, 10)
###
# Sort the data in ascending order of the difference
data_diff <- data_diff[order(Difference)]
# Select the top 10 values where without MC is higher
top_10_diff_withoutmc <- head(data_diff, 10)
###
# Filter data for common skills in top_10_diff
filtered_data <- data[`Common Skill` %in% top_10_diff$`Common Skill`]
# Filter data for common skills in top_10_diff_mc
filtered_data_mc <- data[`Common Skill` %in% top_10_diff_mc$`Common Skill`]
# Filter data for common skills in top_10_diff_withoutmc
filtered_data_withoutmc <- data[`Common Skill` %in% top_10_diff_withoutmc$`Common Skill`]
# ggplot(filtered_data, aes(x = `Common Skill`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
ggplot(filtered_data_mc, aes(x = `Common Skill`, y = NormalizedProfessionals, fill = Group)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
theme(panel.background=element_blank()) +
dais.base.theme() +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
# ggplot(filtered_data_withoutmc, aes(x = `Common Skill`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and without MC for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#Top 5s
data_diff <- data_diff[order(Difference)]
top_5_diff_withoutmc <- head(data_diff, 5)
data_diff <- data_diff[order(-Difference)]
top_5_diff_mc <- head(data_diff, 5)
combined_data <- rbind(transform(top_5_diff_mc, Group = "With MC"),
transform(top_5_diff_withoutmc, Group = "Without MC"))
# Graph with bars on the right and left
ggplot(combined_data, aes(x = `Difference`, y = `Common Skill`, fill = Group)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("With MC" = "#eb0072", "Without MC" = "#6bbfae")) +
labs(x = "Difference", y = "Common Skill", fill = "Group") +
dais.base.theme() +
theme(panel.background=element_blank()) +
ggtitle("Comparison of % Differences in Skills with and without MC") +
geom_text(aes(label = percent(round(abs(`Difference`), 3))),
position = position_dodge(width = 0.9), vjust = 0.5, color = "black")
# clear data and close graphs
rm(list=ls())
graphics.off()
# set working directory
setwd("C:/Users/Ibrahim/OneDrive/Desktop/Brookfield 2023/Microcredentials/Onet Files")
library(data.table)
library(stringr)
library(psych)
library(knitr)
library(tidyverse)
library(readxl)
# Read in O*NET data and BII+E crosswalk
tech_skill <- as.data.table(read_excel("Technology Skills.xlsx"))
crosswalk <- as.data.table(read.csv("complete crosswalks.csv"))
names(tech_skill) <- c("onet","title","skill","code","skill_group","hot_tech","indemand")
# Link O*NET data to NOC using crosswalk
setkey(crosswalk,onet)
setkey(tech_skill,onet)
full.crosswalk.skill <- crosswalk[tech_skill,nomatch=0,allow.cartesian=TRUE]
#Clean environment
rm(tech_skill)
rm(crosswalk)
#Import top skills to compare
data_scientists_topskills <- as.data.table(read_excel("topskills_datascientists.xlsx"))
#Fix the names of some skills
data_scientists_topskills$`Common Skill` <- ifelse(data_scientists_topskills$`Common Skill` == "Java", "JavaScript", data_scientists_topskills$`Common Skill`)
data_scientists_topskills$`Common Skill` <- ifelse(data_scientists_topskills$`Common Skill` == "C (Programming Language)", "C", data_scientists_topskills$`Common Skill`)
# Merge the two data tables based on the common column
merged_data <- merge(data_scientists_topskills, full.crosswalk.skill, by.x = "Common Skill", by.y = "skill")
#NOCs in our study
nocs <- c("21211", "21231", "21232") #DS - SE - SE
#Filter for our NOCs
data <- subset(merged_data, noc_2021 %in% nocs)
#Clean environment
rm(data_scientists_topskills)
rm(full.crosswalk.skill)
rm(merged_data)
rm(nocs)
#Filter for needed columns
data <- data[,c("noc_2021","noc_title","Common Skill","Difference","AbsoluteDifference","Group","skill_group","hot_tech","indemand")]
View(data)
######## COMPARISONS #########
# COMMON SKILLS
# create a new datatable that combines the data from both datatables
data <- rbind(
withoutse_common_skills[, .(Group = "Without SE", `Common Skill`, Professionals)],
`se_Common Skills`[, .(Group = "SE", `Common Skill` = Skills, Professionals)]
)
# clear data and close graphs
rm(list=ls())
graphics.off()
# set working directory
setwd("C:/Users/Ibrahim/OneDrive/Desktop/Brookfield 2023/Microcredentials")
# Load the necessary libraries
library(data.table)
library(stringr)
library(psych)
library(knitr)
library(tidyverse)
library(readxl)
library(dplyr)
library(treemap)
library(extrafont)
library(showtext)
library(ggplot2)
library(DaisTheme)
library(scales)
# Read in data
# Create an empty list to store the data.tables
data_list <- list()
#################################
#IMPORT FIRST EXCEL FILE
##################################
sheets <- excel_sheets("data-bootcamps-moocs-v2.xlsx")
# Loop through each sheet and read it into a data.table
for (sheet in sheets) {
data <- as.data.table(read_excel("data-bootcamps-moocs-v2.xlsx", sheet = sheet))
setnames(data, make.names(names(data)))
data_list[[sheet]] <- data
}
# Unpack the data_list with modified names
for (i in seq_along(data_list)) {
assign(paste0("SE_", names(data_list)[i]), data_list[[i]])
}
rm(data)
rm(data_list)
rm(i)
rm(sheet)
rm(sheets)
#################################
#IMPORT SECOND EXCEL FILE
##################################
# Create an empty list to store the data.tables
data_list <- list()
sheets <- excel_sheets("ds-se-mooc-bootcamp-only.xlsx")
# Loop through each sheet and read it into a data.table
for (sheet in sheets) {
data <- as.data.table(read_excel("ds-se-mooc-bootcamp-only.xlsx", sheet = sheet))
setnames(data, make.names(names(data)))
data_list[[sheet]] <- data
}
# Unpack the data_list with modified names
for (i in seq_along(data_list)) {
assign(paste0("se_", names(data_list)[i]), data_list[[i]])
}
rm(data)
rm(data_list)
rm(i)
rm(sheet)
rm(sheets)
###############################################################
###############################################################
###############################################################
###############################################################
# LOCATION
merged_data <- merge(SE_Locations, se_Locations, by = "Location", suffixes = c("_SE", "_se"), SE.x = TRUE)
merged_data[is.na(Professionals_se), Professionals_se := 0]
withoutse_location <- data.table(Location = merged_data$Location,
Professionals = merged_data$Professionals_SE - merged_data$Professionals_se)
# Companies
merged_data <- merge(SE_Companies, se_Companies, by = "Company", suffixes = c("_SE", "_se"), SE.x = TRUE)
merged_data[is.na(Professionals_se), Professionals_se := 0]
withoutse_company <- data.table(Company = merged_data$Company,
Professionals = merged_data$Professionals_SE - merged_data$Professionals_se)
# Common Titles
merged_data <- merge(`SE_Common Titles`, `se_Common Titles`, by = "Titles", suffixes = c("_SE", "_se"), SE.x = TRUE)
merged_data[is.na(Professionals_se), Professionals_se := 0]
withoutse_common_titles <- data.table(`Common Title` = merged_data$`Titles`,
Professionals = merged_data$Professionals_SE - merged_data$Professionals_se)
# Common Skills
merged_data <- merge(`SE_Common Skills`, `se_Common Skills`, by = "Skills", suffixes = c("_SE", "_se"), SE.x = TRUE)
merged_data[is.na(Professionals_se), Professionals_se := 0]
withoutse_common_skills <- data.table(`Common Skill` = merged_data$`Skills`,
Professionals = merged_data$Professionals_SE - merged_data$Professionals_se)
# Industries
merged_data <- merge(SE_Industries, se_Industries, by = "Industry", suffixes = c("_SE", "_se"), SE.x = TRUE)
merged_data[is.na(Professionals_se), Professionals_se := 0]
withoutse_industries <- data.table(Industry = merged_data$Industry,
Professionals = merged_data$Professionals_SE - merged_data$Professionals_se)
# Schools
merged_data <- merge(SE_Schools, se_Schools, by = "Schools", suffixes = c("_SE", "_se"), SE.x = TRUE)
merged_data[is.na(Professionals_se), Professionals_se := 0]
withoutse_schools <- data.table(School = merged_data$School,
Professionals = merged_data$Professionals_SE - merged_data$Professionals_se)
# Fields of Study
merged_data <- merge(`SE_Fields of Study`, `se_Fields of Study`, by = "Fields.of.study", suffixes = c("_SE", "_se"), SE.x = TRUE)
merged_data[is.na(Professionals_se), Professionals_se := 0]
withoutse_fields_of_study <- data.table(`Field of Study` = merged_data$`Fields.of.study`,
Professionals = merged_data$Professionals_SE - merged_data$Professionals_se)
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
######## COMPARISONS #########
# COMMON SKILLS
# create a new datatable that combines the data from both datatables
data <- rbind(
withoutse_common_skills[, .(Group = "Without SE", `Common Skill`, Professionals)],
`se_Common Skills`[, .(Group = "SE", `Common Skill` = Skills, Professionals)]
)
# normalize the Professionals variable within each group
data[, NormalizedProfessionals := ifelse(Group == "SE", Professionals / sum(se_Locations$Professionals), Professionals / sum(withoutse_location$Professionals))]
# Calculate the differences in professionals between individuals with and without microcredentials for each common skill
data_diff <- data[, .(Difference = diff(NormalizedProfessionals)), by = .(`Common Skill`)]
# Calculate the absolute differences
data_diff[, AbsoluteDifference := abs(Difference)]
# Sort the data in descending order of the absolute difference
data_diff <- data_diff[order(-AbsoluteDifference)]
# Select the top 10 values of the absolute differences
top_10_diff <- head(data_diff, 10)
###
# Sort the data in descending order of the difference
data_diff <- data_diff[order(-Difference)]
# Select the top 10 values where MC is higher
top_10_diff_se <- head(data_diff, 10)
###
# Sort the data in ascending order of the difference
data_diff <- data_diff[order(Difference)]
# Select the top 10 values where Without SE is higher
top_10_diff_withoutse <- head(data_diff, 10)
###
# Filter data for common skills in top_10_diff
filtered_data <- data[`Common Skill` %in% top_10_diff$`Common Skill`]
# Filter data for common skills in top_10_diff_se
filtered_data_se <- data[`Common Skill` %in% top_10_diff_se$`Common Skill`]
# Filter data for common skills in top_10_diff_withoutse
filtered_data_withoutse <- data[`Common Skill` %in% top_10_diff_withoutse$`Common Skill`]
# ggplot(filtered_data, aes(x = `Common Skill`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and Without SE for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
# ggplot(filtered_data_se, aes(x = `Common Skill`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and Without SE for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#
# ggplot(filtered_data_withoutse, aes(x = `Common Skill`, y = NormalizedProfessionals, fill = Group)) +
#   geom_bar(stat = "identity", position = "dodge") +
#   labs(x = "Common Skill", y = "Normalized Number of Professionals", title = "Comparison of Professionals with and Without SE for top 10 skill differences") +
#   theme(panel.background=element_blank()) +
#   theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
#   scale_fill_manual(values = c("#eb0072", "#6bbfae"))
#Top 5s
data_diff <- data_diff[order(Difference)]
top_5_diff_withoutse <- head(data_diff, 5)
data_diff <- data_diff[order(-Difference)]
top_5_diff_se <- head(data_diff, 5)
combined_data <- rbind(transform(top_5_diff_se, Group = "SE"),
transform(top_5_diff_withoutse, Group = "Without SE"))
# Graph with bars on the right and left
ggplot(combined_data, aes(x = `Difference`, y = `Common Skill`, fill = Group)) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("SE" = "#eb0072", "Without SE" = "#6bbfae")) +
labs(x = "Difference", y = "Common Skill", fill = "Group") +
dais.base.theme() +
theme(panel.background=element_blank()) +
ggtitle("Comparison of % Differences in Skills with and Without SE") +
geom_text(aes(label = percent(round(abs(`Difference`), 3))),
position = position_dodge(width = 0.9), vjust = 0.5, color = "black")
